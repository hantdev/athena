name: CI Pipeline - Tests 

on:
  pull_request:
    branches:
      - main

jobs:
  lint-and-build: # Linting and building are combined to save time for setting up Go
    name: Lint and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache-dependency-path: "go.sum"

      - name: Install protolint
        run: |
          go install github.com/yoheimuta/protolint/cmd/protolint@latest

      - name: Lint Protobuf Files
        run: |
          protolint .


  run-tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint-and-build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache-dependency-path: "go.sum"

      - name: Check for changes in specific paths
        uses: dorny/paths-filter@v3
        id: changes
        with:
          base: main
          filters: |
            workflow:
              - ".github/workflows/tests.yml"

            auth:
              - "auth/**"
              - "auth.proto"
              - "auth.pb.go"
              - "auth_grpc.pb.go"

            internal:
              - "internal/**"

            logger:
              - "logger/**"

            pkg-errors:
              - "pkg/errors/**"

            pkg-events:
              - "pkg/events/**"
              - "pkg/messaging/**"

            pkg-messaging:
              - "pkg/messaging/**"

            pkg-uuid:
              - "pkg/uuid/**"


      - name: Create coverage directory
        run: |
          mkdir coverage

      - name: Run auth tests
        if: steps.changes.outputs.auth == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          go test --race -v -count=1 -coverprofile=coverage/auth.out ./auth/...

      - name: Run logger tests
        if: steps.changes.outputs.logger == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          go test --race -v -count=1 -coverprofile=coverage/logger.out ./logger/...

      - name: Run pkg errors tests
        if: steps.changes.outputs.pkg-errors == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          go test --race -v -count=1 -coverprofile=coverage/pkg-errors.out ./pkg/errors/...

      - name: Run pkg events tests
        if: steps.changes.outputs.pkg-events == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          go test --race -v -count=1 -coverprofile=coverage/pkg-events.out ./pkg/events/...

      - name: Run pkg messaging tests
        if: steps.changes.outputs.pkg-messaging == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          go test --race -v -count=1 -coverprofile=coverage/pkg-messaging.out ./pkg/messaging/...

      - name: Run pkg uuid tests
        if: steps.changes.outputs.pkg-uuid == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          go test --race -v -count=1 -coverprofile=coverage/pkg-uuid.out ./pkg/uuid/...

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV }}
          files: ./coverage/*.out
          codecov_yml_path: tools/config/codecov.yml
          verbose: true